% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/GeneSet.R
\docType{methods}
\name{GeneSet}
\alias{GeneSet}
\alias{gs_activate}
\alias{gs_activate.GeneSet}
\alias{gs_gene}
\alias{gs_gene,GeneSet-method}
\alias{gs_set}
\alias{gs_set,GeneSet-method}
\alias{gs_geneset}
\alias{gs_geneset,GeneSet-method}
\alias{filter.GeneSet}
\alias{select.GeneSet}
\alias{mutate.GeneSet}
\alias{map_gene}
\alias{map_gene.GeneSet}
\alias{map_set}
\alias{map_set.GeneSet}
\alias{group_by.GeneSet}
\alias{ungroup.GeneSet}
\alias{summarise.GeneSet}
\alias{arrange.GeneSet}
\alias{group_vars.GeneSet}
\alias{tbl_vars.GeneSet}
\title{A gene set representation as a tripple tibble}
\usage{
GeneSet(..., active = c("geneset", "gene", "set"))

gs_activate(.data, what)

\method{gs_activate}{GeneSet}(.data, what)

gs_gene(x)

\S4method{gs_gene}{GeneSet}(x)

gs_set(x)

\S4method{gs_set}{GeneSet}(x)

gs_geneset(x)

\S4method{gs_geneset}{GeneSet}(x)

\method{filter}{GeneSet}(.data, ...)

\method{select}{GeneSet}(.data, ...)

\method{mutate}{GeneSet}(.data, ...)

map_gene(.data, from, to)

\method{map_gene}{GeneSet}(.data, from, to)

map_set(.data, from, to)

\method{map_set}{GeneSet}(.data, from, to)

\method{group_by}{GeneSet}(.data, ..., add = FALSE)

\method{ungroup}{GeneSet}(x, ...)

\method{summarise}{GeneSet}(.data, ...)

\method{arrange}{GeneSet}(.data, ...)

\method{group_vars}{GeneSet}(x)

\method{tbl_vars}{GeneSet}(x)
}
\arguments{
\item{...}{For `GeneSet()`, named character() vectors of gene
sets. Each character vector is a gene set. The name of the
character vector is the name of the gene set.}

\item{active}{A character to indicate which tibble is active.}

\item{.data}{The 'GeneSet' tibble.}

\item{what}{Which of the three tibbles to activate}

\item{x}{a GeneSet}

\item{from}{a vector of the values to be replaced}

\item{to}{a vector of the replacement values}

\item{add}{by default, `group_by()` will override existing groups. To add to
existing groups, add should be TRUE.}
}
\value{
For `GeneSet()`, a S4 'GeneSet' object in a tripple
    tibble representation.
}
\description{
A gene set representation as a tripple tibble
}
\examples{
GeneSet(set1 = letters, set2 = LETTERS)
gs <- GeneSet(set1 = letters, set2 = LETTERS)
gs_activate(gs, gene)
gs <- GeneSet(set1 = letters, set2 = LETTERS)
gs \%>\% gs_activate(gene) \%>\% filter(gene == "a")
gs <- GeneSet(set1 = letters, set2 = LETTERS)
gs \%>\% select(gene)
gs <- GeneSet(set1 = letters, set2 = LETTERS)
gs \%>\% gs_activate(set) \%>\% mutate(pval = rnorm(1:2))
gs <- GeneSet(set1 = letters, set2 = LETTERS)
gs \%>\% map_gene(letters, LETTERS)
gs <- GeneSet(a = letters, B = LETTERS)
gs \%>\% map_set("a", "A")
gs <- GeneSet(set1 = letters, set2 = LETTERS)
gs \%>\% group_by(gene, set)
gs <- GeneSet(set1 = letters, set2 = LETTERS)
gs \%>\% group_by(set) \%>\% summarise(n = n()) \%>\% ungroup()
gs <- GeneSet(set1 = letters, set2 = LETTERS)
gs \%>\% gs_activate(set) \%>\% summarise(n = n())
gs <- GeneSet(set1 = letters, set2 = LETTERS)
gs \%>\% gs_activate(gene) \%>\% arrange(desc(gene))
gs <- GeneSet(set1 = letters, set2 = LETTERS)
gs \%>\% group_by(gene) \%>\% group_vars()
gs <- GeneSet(set1 = letters, set2 = LETTERS)
gs \%>\% mutate(pval = rnorm(1:52)) \%>\% tbl_vars()
}
