% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllClasses.R, R/BiocSet.R
\docType{class}
\name{BiocSet-class}
\alias{BiocSet-class}
\alias{.BiocSet}
\alias{BiocSet}
\alias{es_activate}
\alias{es_activate.BiocSet}
\alias{update_es_element}
\alias{update_es_set}
\alias{update_es_elementset}
\alias{es_element}
\alias{es_element,BiocSet-method}
\alias{es_set}
\alias{es_set,BiocSet-method}
\alias{es_elementset}
\alias{es_elementset,BiocSet-method}
\alias{es_element<-}
\alias{es_set<-}
\alias{es_elementset<-}
\alias{filter.BiocSet}
\alias{select.BiocSet}
\alias{mutate.BiocSet}
\alias{map_element}
\alias{map_element.BiocSet}
\alias{map_set}
\alias{map_set.BiocSet}
\alias{group_by.BiocSet}
\alias{summarise.BiocSet}
\alias{arrange.BiocSet}
\alias{tbl_vars.BiocSet}
\title{An element set representation as a tripple tibble}
\usage{
BiocSet(..., active = c("elementset", "element", "set"))

es_activate(.data, what)

\method{es_activate}{BiocSet}(.data, what)

update_es_element(es, value)

update_es_set(es, value)

update_es_elementset(es, value)

es_element(x)

\S4method{es_element}{BiocSet}(x)

es_set(x)

\S4method{es_set}{BiocSet}(x)

es_elementset(x)

\S4method{es_elementset}{BiocSet}(x)

es_element(es) <- value

es_set(es) <- value

es_elementset(es) <- value

\method{filter}{BiocSet}(.data, ...)

\method{select}{BiocSet}(.data, ...)

\method{mutate}{BiocSet}(.data, ...)

map_element(.data, from, to)

\method{map_element}{BiocSet}(.data, from, to)

map_set(.data, from, to)

\method{map_set}{BiocSet}(.data, from, to)

\method{group_by}{BiocSet}(.data, ..., add = FALSE)

\method{summarise}{BiocSet}(.data, ...)

\method{arrange}{BiocSet}(.data, ...)

\method{tbl_vars}{BiocSet}(x)
}
\arguments{
\item{...}{For `BiocSet()`, named character() vectors of element
sets. Each character vector is an element set. The name of the
character vector is the name of the element set.}

\item{active}{A character to indicate which tibble is active.}

\item{.data}{The 'BiocSet' tibble.}

\item{what}{Which of the three tibbles to activate}

\item{es}{The active tibble}

\item{value}{What it is being updated to}

\item{x}{The active tibble}

\item{from}{a vector of the values to be replaced}

\item{to}{a vector of the replacement values}

\item{add}{by default, `group_by()` will override existing groups. To add to
existing groups, add should be TRUE.}
}
\value{
For `BiocSet()`, an S4 'BiocSet' object in a tripple
    tibble representation.
}
\description{
An element set representation as a tripple tibble
}
\section{Slots}{

\describe{
\item{\code{element}}{The element tibble from `tbl_elementset`}

\item{\code{set}}{The set tibble from `tbl_elementset`}

\item{\code{elementset}}{The elementset tibble created from user input}

\item{\code{active}}{The tibble that is active}
}}

\examples{
BiocSet(set1 = letters, set2 = LETTERS)
es <- BiocSet(set1 = letters, set2 = LETTERS)
es_activate(es, element)
es <- BiocSet(set1 = letters, set2 = LETTERS)
es \%>\% es_activate(element) \%>\% filter(element == "a")
es <- BiocSet(set1 = letters, set2 = LETTERS)
es \%>\% select(element)
es <- BiocSet(set1 = letters, set2 = LETTERS)
es \%>\% es_activate(set) \%>\% mutate(pval = rnorm(1:2))
es <- BiocSet(set1 = letters, set2 = LETTERS)
es \%>\% map_element(letters, LETTERS)
es <- BiocSet(a = letters, B = LETTERS)
es \%>\% map_set("set1", "foo")
es <- BiocSet(set1 = letters, set2 = LETTERS)
es \%>\% group_by(element, set)
es <- BiocSet(set1 = letters, set2 = LETTERS)
es \%>\% es_activate(set) \%>\% summarise(n = n())
es <- BiocSet(set1 = letters, set2 = LETTERS)
es \%>\% es_activate(element) \%>\% arrange(desc(element))
es <- BiocSet(set1 = letters, set2 = LETTERS)
es \%>\% mutate(pval = rnorm(1:52)) \%>\% tbl_vars()
}
