% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllClasses.R, R/BiocSet.R
\docType{class}
\name{BiocSet-class}
\alias{BiocSet-class}
\alias{.BiocSet}
\alias{BiocSet}
\alias{es_activate}
\alias{es_activate.BiocSet}
\alias{update_es_element}
\alias{update_es_set}
\alias{update_es_elementset}
\alias{es_element}
\alias{es_element,BiocSet-method}
\alias{es_set}
\alias{es_set,BiocSet-method}
\alias{es_elementset}
\alias{es_elementset,BiocSet-method}
\alias{es_element<-}
\alias{es_set<-}
\alias{es_elementset<-}
\alias{filter_element}
\alias{filter_set}
\alias{filter_elementset}
\alias{select_element}
\alias{select_set}
\alias{select_elementset}
\alias{mutate_element}
\alias{mutate_set}
\alias{mutate_elementset}
\alias{summarise_element}
\alias{summarise_set}
\alias{summarise_elementset}
\alias{arrange_element}
\alias{arrange_set}
\alias{arrange_elementset}
\alias{left_join_element}
\alias{left_join_set}
\alias{left_join_elementset}
\alias{BiocSet_from_elementset}
\alias{as.list.BiocSet}
\alias{tibble_by_elementset}
\alias{tibble_by_element}
\alias{tibble_by_set}
\alias{data.frame_by_elementset}
\alias{data.frame_by_element}
\alias{data.frame_by_set}
\title{An element set representation as a tripple tibble}
\usage{
BiocSet(..., active = c("elementset", "element", "set"))

es_activate(.data, what)

\method{es_activate}{BiocSet}(.data, what)

update_es_element(es, value)

update_es_set(es, value)

update_es_elementset(es, value)

es_element(x)

\S4method{es_element}{BiocSet}(x)

es_set(x)

\S4method{es_set}{BiocSet}(x)

es_elementset(x)

\S4method{es_elementset}{BiocSet}(x)

es_element(es) <- value

es_set(es) <- value

es_elementset(es) <- value

filter_element(.data, ...)

filter_set(.data, ...)

filter_elementset(.data, ...)

select_element(.data, ...)

select_set(.data, ...)

select_elementset(.data, ...)

mutate_element(.data, ...)

mutate_set(.data, ...)

mutate_elementset(.data, ...)

summarise_element(.data, ...)

summarise_set(.data, ...)

summarise_elementset(.data, ...)

arrange_element(.data, ...)

arrange_set(.data, ...)

arrange_elementset(.data, ...)

left_join_element(.data, ...)

left_join_set(.data, ...)

left_join_elementset(.data, ...)

BiocSet_from_elementset(elementset, element, set)

\method{as.list}{BiocSet}(x, ...)

tibble_by_elementset(es)

tibble_by_element(es, how = unlist)

tibble_by_set(es, how = unlist)

data.frame_by_elementset(es)

data.frame_by_element(es, how = unlist)

data.frame_by_set(es, how = unlist)
}
\arguments{
\item{...}{For `BiocSet()`, named character() vectors of element
sets. Each character vector is an element set. The name of the
character vector is the name of the element set.}

\item{active}{A character to indicate which tibble is active.}

\item{.data}{The 'BiocSet' tibble.}

\item{what}{Which of the three tibbles to activate}

\item{es}{The active tibble}

\item{value}{What it is being updated to}

\item{x}{The active tibble}

\item{elementset}{A tibble with element set information}

\item{element}{A tibble with element information}

\item{set}{A tibble with set information}

\item{how}{Multiple entries will become a list.}
}
\value{
For `BiocSet()`, an S4 'BiocSet' object in a tripple
    tibble representation.

A tibble

A tibble

A tibble

A data.frame

A data.frame

A data.frame
}
\description{
An element set representation as a tripple tibble
}
\section{Slots}{

\describe{
\item{\code{element}}{The element tibble from `tbl_elementset`}

\item{\code{set}}{The set tibble from `tbl_elementset`}

\item{\code{elementset}}{The elementset tibble created from user input}

\item{\code{active}}{Character, indicates which tibble is active}
}}

\examples{
BiocSet(set1 = letters, set2 = LETTERS)
es <- BiocSet(set1 = letters, set2 = LETTERS)
es_activate(es, element)
es <- BiocSet(set1 = letters, set2 = LETTERS)
filter_element(es, element == "a")
es <- BiocSet(set1 = letters, set2 = LETTERS)
filter_set(es, set == "set1")
es <- BiocSet(set1 = letters, set2 = LETTERS)
filter_elementset(es, element == "a" | element == "A")
es <- BiocSet(set1 = letters, set2 = LETTERS)
es \%>\% select_element(element)
es <- BiocSet(set1 = letters, set2 = LETTERS)
es \%>\% select_set(set)
es <- BiocSet(set1 = letters, set2 = LETTERS)
es \%>\% select_elementset(element)
es <- BiocSet(set1 = letters, set2 = LETTERS)
es \%>\% mutate_element(pval = rnorm(1:52))
es <- BiocSet(set1 = letters, set2 = LETTERS)
es \%>\% mutate_set(pval = rnorm(1:2))
es <- BiocSet(set1 = letters, set2 = LETTERS)
es \%>\% mutate_elementset(pval = rnorm(1:52))
es <- BiocSet(set1 = letters, set2 = LETTERS)
es \%>\% summarise_element(n = n())
es <- BiocSet(set1 = letters, set2 = LETTERS)
es \%>\% summarise_set(n = n())
es <- BiocSet(set1 = letters, set2 = LETTERS)
es \%>\% summarise_elementset(n = n())
es <- BiocSet(set1 = letters, set2 = LETTERS)
es \%>\% arrange_element(desc(element))
es <- BiocSet(set1 = letters, set2 = LETTERS)
es \%>\% arrange_set(desc(set))
es <- BiocSet(set1 = letters, set2 = LETTERS)
es \%>\% arrange_elementset(desc(element))
tbl <- tibble(x = 1:5, y = letters[1:5])
es <- BiocSet(set1 = letters[c(1,3,5)], set2 = letters[c(2,4)])
left_join_element(es, tbl, by = c(element = "y"))
tbl <- tibble(x = 10:11, y = c("set1", "set2"))
es <- BiocSet(set1 = letters[c(1,3,5)], set2 = letters[c(2,4)])
left_join_set(es, tbl, by = c(set = "y"))
es <- BiocSet(set1 = letters, set2 = LETTERS)
tbl <- tibble(x = 5:6, y = c("set1", "set2"))
es \%>\% left_join_elementset(tbl, by = c(set = "y"))
set.seed(123)
element <- 
   tibble(
       element = letters[1:10],
       v1 = sample(10),
       v2 = sample(10)
   )
set <- 
   tibble(
       set = LETTERS[1:2],
       v1 = sample(2),
       v2 = sample(2)
   )
elementset <- 
   tibble(
       element = letters[1:10],
       set = sample(LETTERS[1:2], 10, TRUE)
   )
BiocSet_from_elementset(elementset, element, set) 
library(org.Hs.eg.db)
es <- go_sets(org.Hs.eg.db, "ENSEMBL")
head(as.list(es))
es <- BiocSet(set1 = letters, set2 = LETTERS)
tibble_by_elementset(es)
tibble_by_element(es)
tibble_by_set(es)
data.frame_by_elementset(es)
data.frame_by_element(es)
data.frame_by_set(es)
}
